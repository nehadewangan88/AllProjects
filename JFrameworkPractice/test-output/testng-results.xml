<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="1" total="13" passed="10" failed="2" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2024-07-03T19:49:01 IST" name="Suite" finished-at="2024-07-03T19:49:01 IST" duration-ms="122">
    <groups>
    </groups>
    <test started-at="2024-07-03T19:49:01 IST" name="Test" finished-at="2024-07-03T19:49:01 IST" duration-ms="122">
      <class name="Practice2.ConventSchool">
        <test-method is-config="true" signature="Documentation()[pri:0, instance:Practice2.ConventSchool@3270d194]" started-at="2024-07-03T19:49:01 IST" name="Documentation" finished-at="2024-07-03T19:49:01 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Documentation -->
        <test-method is-config="true" signature="BeforeMEthod()[pri:0, instance:Practice2.ConventSchool@3270d194]" started-at="2024-07-03T19:49:01 IST" name="BeforeMEthod" finished-at="2024-07-03T19:49:01 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeforeMEthod -->
        <test-method signature="HighSchool(java.lang.String)[pri:0, instance:Practice2.ConventSchool@3270d194]" started-at="2024-07-03T19:49:01 IST" name="HighSchool" finished-at="2024-07-03T19:49:01 IST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Section-A]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- HighSchool -->
        <test-method is-config="true" signature="BeforeMEthod()[pri:0, instance:Practice2.ConventSchool@3270d194]" started-at="2024-07-03T19:49:01 IST" name="BeforeMEthod" finished-at="2024-07-03T19:49:01 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BeforeMEthod -->
        <test-method signature="PreprimarySchool(java.lang.String,java.lang.String)[pri:0, instance:Practice2.ConventSchool@3270d194]" started-at="2024-07-03T19:49:01 IST" name="PreprimarySchool" finished-at="2024-07-03T19:49:01 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[https://www.conventschool.com]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[https://www.college.com]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- PreprimarySchool -->
        <test-method is-config="true" signature="MiddleSchool()[pri:0, instance:Practice2.ConventSchool@3270d194]" started-at="2024-07-03T19:49:02 IST" name="MiddleSchool" finished-at="2024-07-03T19:49:02 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- MiddleSchool -->
        <test-method is-config="true" signature="verification()[pri:0, instance:Practice2.ConventSchool@3270d194]" started-at="2024-07-03T19:49:02 IST" name="verification" finished-at="2024-07-03T19:49:02 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- verification -->
      </class> <!-- Practice2.ConventSchool -->
      <class name="Practice2.College">
        <test-method is-config="true" signature="BirthCertificate()[pri:0, instance:Practice2.College@47eaca72]" started-at="2024-07-03T19:49:01 IST" name="BirthCertificate" finished-at="2024-07-03T19:49:01 IST" duration-ms="12" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BirthCertificate -->
        <test-method signature="BranchITBranch4()[pri:0, instance:Practice2.College@47eaca72]" started-at="2024-07-03T19:49:01 IST" name="BranchITBranch4" finished-at="2024-07-03T19:49:01 IST" duration-ms="10" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:110)
at org.testng.Assert.failNotEquals(Assert.java:1577)
at org.testng.Assert.assertTrue(Assert.java:56)
at org.testng.Assert.assertTrue(Assert.java:66)
at Practice2.College.BranchITBranch4(College.java:53)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:677)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:221)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:969)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:194)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:829)
at org.testng.TestRunner.run(TestRunner.java:602)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:437)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:431)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:391)
at org.testng.SuiteRunner.run(SuiteRunner.java:330)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1256)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1176)
at org.testng.TestNG.runSuites(TestNG.java:1099)
at org.testng.TestNG.run(TestNG.java:1067)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BranchITBranch4 -->
        <test-method is-config="true" signature="AfterMethod()[pri:0, instance:Practice2.College@47eaca72]" started-at="2024-07-03T19:49:01 IST" name="AfterMethod" finished-at="2024-07-03T19:49:01 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterMethod -->
        <test-method signature="NewBranch()[pri:0, instance:Practice2.College@47eaca72]" started-at="2024-07-03T19:49:01 IST" name="NewBranch" finished-at="2024-07-03T19:49:01 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- NewBranch -->
        <test-method is-config="true" signature="AfterMethod()[pri:0, instance:Practice2.College@47eaca72]" started-at="2024-07-03T19:49:01 IST" name="AfterMethod" finished-at="2024-07-03T19:49:01 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterMethod -->
        <test-method signature="BranchITBranch1()[pri:0, instance:Practice2.College@47eaca72]" started-at="2024-07-03T19:49:01 IST" name="BranchITBranch1" finished-at="2024-07-03T19:49:01 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BranchITBranch1 -->
        <test-method is-config="true" signature="AfterMethod()[pri:0, instance:Practice2.College@47eaca72]" started-at="2024-07-03T19:49:01 IST" name="AfterMethod" finished-at="2024-07-03T19:49:01 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterMethod -->
        <test-method signature="BranchITBranch2()[pri:0, instance:Practice2.College@47eaca72]" started-at="2024-07-03T19:49:01 IST" name="BranchITBranch2" finished-at="2024-07-03T19:49:01 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- BranchITBranch2 -->
        <test-method signature="CivilBranch()[pri:0, instance:Practice2.College@47eaca72]" started-at="2024-07-03T19:49:01 IST" name="CivilBranch" finished-at="2024-07-03T19:49:01 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- CivilBranch -->
        <test-method is-config="true" signature="AfterMethod()[pri:0, instance:Practice2.College@47eaca72]" started-at="2024-07-03T19:49:01 IST" name="AfterMethod" finished-at="2024-07-03T19:49:01 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterMethod -->
        <test-method is-config="true" signature="AfterMethod()[pri:0, instance:Practice2.College@47eaca72]" started-at="2024-07-03T19:49:01 IST" name="AfterMethod" finished-at="2024-07-03T19:49:01 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterMethod -->
        <test-method signature="ITBranch3()[pri:0, instance:Practice2.College@47eaca72]" started-at="2024-07-03T19:49:01 IST" name="ITBranch3" finished-at="2024-07-03T19:49:01 IST" duration-ms="2" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [true] but found [false]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [true] but found [false]
at org.testng.Assert.fail(Assert.java:110)
at org.testng.Assert.failNotEquals(Assert.java:1577)
at org.testng.Assert.assertTrue(Assert.java:56)
at org.testng.Assert.assertTrue(Assert.java:66)
at Practice2.College.ITBranch3(College.java:46)
at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)
at java.base/java.lang.reflect.Method.invoke(Method.java:580)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:677)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:221)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:969)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:194)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)
at org.testng.TestRunner.privateRun(TestRunner.java:829)
at org.testng.TestRunner.run(TestRunner.java:602)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:437)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:431)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:391)
at org.testng.SuiteRunner.run(SuiteRunner.java:330)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1256)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1176)
at org.testng.TestNG.runSuites(TestNG.java:1099)
at org.testng.TestNG.run(TestNG.java:1067)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ITBranch3 -->
        <test-method is-config="true" signature="AfterMethod()[pri:0, instance:Practice2.College@47eaca72]" started-at="2024-07-03T19:49:01 IST" name="AfterMethod" finished-at="2024-07-03T19:49:01 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterMethod -->
        <test-method signature="MechanicalBranch()[pri:0, instance:Practice2.College@47eaca72]" started-at="2024-07-03T19:49:01 IST" name="MechanicalBranch" finished-at="2024-07-03T19:49:01 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- MechanicalBranch -->
        <test-method is-config="true" signature="AfterMethod()[pri:0, instance:Practice2.College@47eaca72]" started-at="2024-07-03T19:49:01 IST" name="AfterMethod" finished-at="2024-07-03T19:49:01 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterMethod -->
        <test-method signature="ITBranch5()[pri:0, instance:Practice2.College@47eaca72]" started-at="2024-07-03T19:49:01 IST" name="ITBranch5" finished-at="2024-07-03T19:49:01 IST" depends-on-methods="Practice2.College.NewBranch" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ITBranch5 -->
        <test-method is-config="true" signature="AfterMethod()[pri:0, instance:Practice2.College@47eaca72]" started-at="2024-07-03T19:49:01 IST" name="AfterMethod" finished-at="2024-07-03T19:49:01 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- AfterMethod -->
      </class> <!-- Practice2.College -->
      <class name="Practice2.Hostel">
        <test-method signature="JuniorHostel()[pri:0, instance:Practice2.Hostel@6302bbb1]" started-at="2024-07-03T19:49:01 IST" name="JuniorHostel" finished-at="2024-07-03T19:49:01 IST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- JuniorHostel -->
        <test-method signature="SeniorHostel()[pri:0, instance:Practice2.Hostel@6302bbb1]" started-at="2024-07-03T19:49:01 IST" name="SeniorHostel" finished-at="2024-07-03T19:49:01 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- SeniorHostel -->
        <test-method is-config="true" signature="ClosingHours()[pri:0, instance:Practice2.Hostel@6302bbb1]" started-at="2024-07-03T19:49:01 IST" name="ClosingHours" finished-at="2024-07-03T19:49:01 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- ClosingHours -->
      </class> <!-- Practice2.Hostel -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
